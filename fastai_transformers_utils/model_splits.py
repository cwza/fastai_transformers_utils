# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01b_model_splits.ipynb (unless otherwise specified).

__all__ = ['bert_SeqClassification_split', 'roberta_SeqClassification_split', 'gpt2_lmhead_split',
           'distilbert_SeqClassification_split', 'albert_SeqClassification_split']

# Cell
#export
from fastcore.all import *
from fastai2.basics import *

from transformers import AutoModelForSequenceClassification, AutoModelWithLMHead

# Cell
''' Print the model, look at its architecture, then write down the split '''
def bert_SeqClassification_split(m:nn.Module):
    # 12 layers, 110M params
    return L(m.bert.embeddings, *m.bert.encoder.layer, m.bert.pooler, m.classifier).map(params)

# Cell
def roberta_SeqClassification_split(m:nn.Module):
    return L(m.roberta.embeddings, *m.roberta.encoder.layer, m.roberta.pooler, m.classifier).map(params)

# Cell
def gpt2_lmhead_split(m:nn.Module):
    # 12-layer, 768-hidden, 12-heads, 117M parameters.
    return L(m.transformer.wte, m.transformer.wpe, *m.transformer.h, m.lm_head).map(params)

# Cell
def distilbert_SeqClassification_split(m:nn.Module):
    # 6 layers, 66M params
    return L(m.distilbert.embeddings, *m.distilbert.transformer.layer, m.pre_classifier, m.classifier).map(params)
def albert_SeqClassification_split(m: nn.Module):
    return L(m.albert.embeddings, *m.albert.encoder.albert_layer_groups, m.albert.pooler, m.classifier).map(params)